"use strict";var app=angular.module("myApp",["ui.router","satellizer"]);app.config(["$authProvider",function(e){e.loginUrl="api/users/login",e.signupUrl="api/users/signup",e.facebook({clientId:"255060128209165",url:"/api/users/facebook"})}]),app.config(["$stateProvider","$urlRouterProvider",function(e,o){e.state("home",{url:"/",templateUrl:"/html/home.html"}).state("login",{url:"/login",templateUrl:"/html/login.html",controller:"loginCtrl"}).state("register",{url:"/register",templateUrl:"/html/register.html",controller:"registerCtrl"}).state("profile",{url:"/profile/:userId",templateUrl:"/html/profile.html",controller:"profileCtrl",resolve:{Profile:["User",function(e){return e.profile()}],ProfileByID:["User","$stateParams",function(e,o){return e.getProfile(o.userId)}]}}).state("users",{url:"/users",templateUrl:"/html/users.html",controller:"usersCtrl"}).state("cruds",{url:"/cruds",templateUrl:"html/cruds.html",controller:"crudCtrl"}),o.otherwise("/")}]);var app=angular.module("myApp");app.controller("crudCtrl",["$scope","Crud",function(e,o){e.cruds=[],o.getAll().then(function(o){e.cruds=o.data,console.log("$scope.cruds:",e.cruds)})["catch"](function(e){console.log("err: ",e)}),e.addCrud=function(){o.addCrud(e.newItem).then(function(o){e.cruds.push(o),e.newItem={}})["catch"](function(e){console.log("error: ",e)})},e.deleteCrud=function(t,r){console.log("crud:",r),o.deleteCrud(r._id).then(function(o){e.cruds.splice(t,1)})["catch"](function(e){console.log("error: ",e)})},e.showUpdateForm=function(o,t){console.log("index: ",o),console.log("crud: ",t),e.showUpdate=!0,e.updateItem=t,e.updateIndex=o},e.updateCrud=function(){e.showUpdate=!1,o.updateCrud(e.updateItem._id,e.updateItem).then(function(o){console.log("update apt:",e.updateItem._id," , ",e.updateItem)})["catch"](function(e){console.log("error: ",e)})}}]);var app=angular.module("myApp");app.controller("loginCtrl",["$scope","$state","$auth","$rootScope",function(e,o,t,r){console.log("loginCtrl!"),e.login=function(){t.login(e.user).then(function(e){console.log("res: ",e),o.go("profile")})["catch"](function(e){console.log("err:",e)})}}]);var app=angular.module("myApp");app.controller("mainCtrl",["$scope","$state","$auth","$rootScope",function(e,o,t,r){console.log("mainCtrl!"),r.currentUser,e.isAuthenticated=function(){return t.isAuthenticated()},e.logout=function(){t.logout(),o.go("home")},e.authenticate=function(e){t.authenticate(e).then(function(e){o.go("home")})["catch"](function(e){console.log("err:",e)})}}]);var app=angular.module("myApp");app.controller("profileCtrl",["$scope","Profile","ProfileByID","$state","User","$rootScope",function(e,o,t,r,n,l){console.log("profileCtrl!"),l.currentUser=o,e.user=t||o,console.log("user:",e.user),console.log("curruser:",l.currentUser),e.showdisplayNameForm=function(){console.log("show form"),e.displayNameForm=!0},e.updatedisplayName=function(){e.displayNameForm=!1,e.user.displayName=e.newItem.displayName,n.updateProfile(e.user._id,e.newItem).then(function(o){console.log("profile:",o),e.newItem.displayName=""})["catch"](function(e){console.log("err:",e)})},e.canceldisplayName=function(){e.usernameForm=!0,e.newItem.displayName=""},e.showPictureForm=function(){console.log("show form"),e.photoForm=!0},e.updatePicture=function(){e.photoForm=!1,console.log("$state.current: ",r.current),e.user.profileImage=e.newItem.profileImage,console.log("$scope.newItem:",e.newItem),n.updateProfile(e.user._id,e.newItem).then(function(o){console.log("profile:",o),e.newItem.profileImage=""})["catch"](function(e){console.log("err:",e)})},e.cancelPhotoUrl=function(){e.photoForm=!0,e.newItem.photoUrl=""},e.deleteAccount=function(e){console.log(e._id),n.deleteAccount(e._id).then()["catch"](function(e){console.log("err: ",e)})}}]);var app=angular.module("myApp");app.controller("registerCtrl",["$scope","$state","$auth",function(e,o,t){console.log("registerCtrl!"),e.register=function(){e.user.password!==e.user.password2?(e.user.password=null,e.user.password2=null,alert("Passwords must match!")):t.signup(e.user).then(function(e){console.log("res: ",e),o.go("login")})["catch"](function(e){console.log("err:",e)})}}]);var app=angular.module("myApp");app.controller("usersCtrl",["$scope","$$state","$state","User",function(e,o,t,r){console.log("usersCtrl!");var n=r.getAll();console.log("userPromise:",n),n.then(function(o){console.log(o.data),e.userFeed=o.data})}]);var app=angular.module("myApp");app.service("Crud",["$http","$q",function(e,o){this.getAll=function(){return e.get("/api/cruds")},this.getById=function(o){return e.get("/api/cruds/"+o)},this.addCrud=function(t){return e.post("/api/cruds",t).then(function(e){return o.resolve(e.data)})["catch"](function(e){console.log("err:",e)})},this.deleteCrud=function(t){return e["delete"]("/api/cruds/"+t).then(function(){return o.resolve()})["catch"](function(e){console.log("err:",e)})},this.updateCrud=function(t,r){return e.put("/api/cruds/"+t,r).then(function(e){return o.resolve(r)})["catch"](function(e){console.log("err:",e)})}}]);var app=angular.module("myApp");app.service("User",["$http","$q",function(e,o){this.profile=function(){return e.get("/api/users/profile").then(function(e){return o.resolve(e.data)})},this.getProfile=function(t){return e.get("/api/users/profile/"+t).then(function(e){return o.resolve(e.data)})["catch"](function(e){console.log("err:",e)})},this.getAll=function(){return e.get("/api/users")},this.updateProfile=function(t,r){return console.log("here"),console.log(t," ",r),e.put("/api/users/profile/"+t,r).then(function(e){return console.log("res.data",e.data),console.log("profileObj",r),o.resolve()})["catch"](function(e){console.log("err:",e)})},this.deleteAccount=function(t){return e["delete"]("/api/users/profile/"+t).then(function(e){return o.resolve()})["catch"](function(e){console.log("err:",e)})},this.addWallPostToUser=function(t,r){return console.log("userId: ",t," postId: ",r),e.put("/api/users/profile/"+t+"/addWallPost/"+r).then(function(e){return o.resolve(e.data)})["catch"](function(e){console.log("err:",e)})}}]);
//# sourceMappingURL=data:application/json;base64,
